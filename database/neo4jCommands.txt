// products

:auto USING PERIODIC COMMIT 1000
LOAD CSV WITH HEADERS FROM 'file:/product.csv' AS row
CREATE (product:Product {
  id: toInteger(row.id),
  name: row.name,
  slogan: row.slogan,
  description: row.description,
  category: row.category,
  default_price: row.default_price
})
RETURN count(product);

// styles

:auto USING PERIODIC COMMIT 3000
LOAD CSV WITH HEADERS FROM 'file:///styles.csv' AS row
CREATE (style:Style {
  style_id: toInteger(row.id),
  productId: row.productId,
  name: row.name,
  sale_price: row.sale_price,
  original_price: row.original_price,
  default: (case row.default_style when '1' then true else false end)
})
RETURN count(style);

// features

:auto USING PERIODIC COMMIT 3000
LOAD CSV WITH HEADERS FROM 'file:///features.csv' AS row
CREATE (feature:Feature {
  id: toInteger(row.id),
  product_id: toInteger(row.product_id),
  feature: row.feature,
  value: row.value
})
RETURN count(feature);


// related

:auto USING PERIODIC COMMIT 3000
LOAD CSV WITH HEADERS FROM 'file:///related.csv' AS row
CREATE (relatedProduct:RelatedProduct {
  id: toInteger(row.id),
  current_product_id: toInteger(row.current_product_id),
  related_product_id: toInteger(row.related_product_id)
})
RETURN count(relatedProduct);

// skus

:auto USING PERIODIC COMMIT 3000
LOAD CSV WITH HEADERS FROM 'file:///skus.csv' AS row
CREATE (sku:Sku {
  id: row.id,
  styleId: row.styleId,
  size: row.size,
  quantity: row.quantity
})
RETURN count(sku);

// photos

:auto USING PERIODIC COMMIT 3000
LOAD CSV WITH HEADERS FROM 'file:///photosCleaned2.csv' AS row
CREATE (photo:Photo {
  id: toInteger(row.id),
  styleId: toInteger(row.styleId),
  url: row.url,
  thumbnail_url: row.thumbnailUrl
})
RETURN count(photo);

// relationships

// product + related products (HAS_RELATED_PRODUCT)
MATCH (product:Product)
MATCH (relatedP:RelatedProduct)
WHERE product.id = relatedP.current_product_id
CREATE (product)-[:HAS_RELATED_PRODUCT]->(relatedP)
RETURN *

// styles + products (HAS_STYLE)
MATCH (product:Product)
MATCH (style:Style)
WHERE product.id = toInteger(style.productId)
MERGE (product)-[:HAS_STYLE]->(style)
RETURN *

// styles + photos (HAS_PHOTO)
MATCH (style:Style)
MATCH (photo:Photo)
WHERE style.style_id = photo.styleId
MERGE (style)-[:HAS_PHOTO]->(photo)
RETURN *

// feature + product (HAS_FEATURE)
MATCH (product:Product)
MATCH (feature:Feature)
WHERE product.id = feature.product_id
MERGE (product)-[:HAS_FEATURE]->(feature)
RETURN *

// style + skus (HAS_SKU)
MATCH (style:Style)
MATCH (skus:Skus)
WHERE style.style_id = toInteger(skus.styleId)
MERGE (style)-[:HAS_SKUS]->(skus)
RETURN *

// APOC method to create [:HAS_SKU] relationship

CALL apoc.periodic.iterate(
"MATCH (sku:Sku) MATCH (s:Style) WHERE toInteger(sku.styleId) = s.style_id RETURN sku, s",
"CREATE (s)-[:HAS_SKU]->(sku)", {batchSize: 1000, parallel: true})

CALL apoc.periodic.iterate(
"MATCH (n:Feature) OPTIONAL MATCH (n)-[r]-() RETURN n, r",
"DELETE n, r", {batchSize: 1000, parallel: true})

// define constraints

// products will be most frequently accessed by id & id must be unique -> index will be created with constraint
// styles will be most frequently accessed by product_id but style_id is the unique identifier
// features will accessed via product_id

CREATE CONSTRAINT require_product_id IF NOT EXISTS FOR (p:Product) REQUIRE p.id IS UNIQUE
CREATE CONSTRAINT require_style_id IF NOT EXISTS FOR (s:Style) REQUIRE s.style_id IS UNIQUE
CREATE CONSTRAINT require_feature_id IF NOT EXISTS FOR (f:Feature) REQUIRE f.id IS UNIQUE
CREATE CONSTRAINT require_related_id IF NOT EXISTS FOR (relatedProduct:RelatedProduct) REQUIRE relatedProduct.id IS UNIQUE

// define indexes
CREATE INDEX FOR (n:RelatedProduct) ON (n.current_product_id)

// delete all nodes with a specific label
MATCH (n:RelatedProduct) OPTIONAL MATCH (n)-[r]-() DELETE n, r

// products

CALL apoc.periodic.iterate(
  "CALL apoc.load.csv('file:///products.csv')
  YIELD map AS row RETURN row",
  "WITH toInteger(row.id) as id, row.name AS name, row.slogan AS slogan, row.description AS description, row.category AS category, row.default_price AS default_price
)

// query to return all connected nodes
MATCH (p:Product {id: 1})-[*]-(connected) RETURN connected, p

// query to return styles, skus, photos
MATCH (s:Style)-[:HAS_SKU]-(sku)
WHERE s.productId = '1'
WITH s, collect(sku) AS skus
MATCH (s)-[:HAS_PHOTO]-(ph)
RETURN s, skus, collect(ph) as photos


CALL apoc.periodic.commit(
  "
)
